package com.fuelstation.managmentapi.infrastructure.persistence.mappers;

import com.fuelstation.managmentapi.administrator.domain.Administrator;
import com.fuelstation.managmentapi.authentication.domain.Credentials;
import com.fuelstation.managmentapi.common.domain.FuelGrade;
import com.fuelstation.managmentapi.fuelorder.domain.FuelOrder;
import com.fuelstation.managmentapi.fuelstation.domain.models.*;
import com.fuelstation.managmentapi.infrastructure.persistence.entities.*;
import com.fuelstation.managmentapi.manager.domain.Manager;

import java.time.LocalDate;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

public class CredentialsMapper {
    public static Credentials toDomain(CredentialsEntity entity) {
        if (entity == null) return null;
        return new Credentials(
            entity.getId(),
            entity.getEmail(),
            entity.getRole(),
            entity.getPassword(),
            entity.getAccessToken()
        );
    }

    public static CredentialsEntity toEntity(Credentials domain) {
        if (domain == null) return null;
        return new CredentialsEntity(
            domain.getId(),
            domain.getEmail(),
            domain.getRole(),
            domain.getPassword(),
            domain.getAccessToken()
        );
    }
}

public class AdministratorMapper {
    public static Administrator toDomain(AdministratorEntity entity, CredentialsEntity credentialsEntity) {
        if (entity == null) return null;
        return new Administrator(
            entity.getId(),
            credentialsEntity != null ? credentialsEntity.getEmail() : null,
            entity.getCredentialsId()
        );
    }

    public static AdministratorEntity toEntity(Administrator domain) {
        if (domain == null) return null;
        return new AdministratorEntity(
            domain.getId(),
            domain.getCredentialsId()
        );
    }
}

public class ManagerMapper {
    public static Manager toDomain(ManagerEntity entity, CredentialsEntity credentialsEntity) {
        if (entity == null) return null;
        return new Manager(
            entity.getId(),
            entity.getFirtsName(),
            entity.getLastName(),
            entity.getStatus(),
            credentialsEntity != null ? credentialsEntity.getEmail() : null,
            credentialsEntity != null ? credentialsEntity.getId().toString() : null
        );
    }

    public static ManagerEntity toEntity(Manager domain) {
        if (domain == null) return null;
        return new ManagerEntity(
            domain.getId(),
            domain.getFirtsName(),
            domain.getLastName(),
            domain.getStatus(),
            domain.getCredentialsId() != null ? Long.parseLong(domain.getCredentialsId()) : null
        );
    }
}

public class FuelOrderMapper {
    public static FuelOrder toDomain(FuelOrderEntity entity) {
        if (entity == null) return null;
        return new FuelOrder(
            entity.getId(),
            entity.getStatus(),
            entity.getGrade(),
            entity.getAmount(),
            entity.getGasStationId(),
            entity.getCreatedAt()
        );
    }

    public static FuelOrderEntity toEntity(FuelOrder domain) {
        if (domain == null) return null;
        return new FuelOrderEntity(
            domain.getId(),
            domain.getStatus(),
            domain.getGrade(),
            domain.getAmount(),
            domain.getGasStationId(),
            domain.getCreatedAt()
        );
    }
}

public class FuelStationMapper {
    public static FuelStation toDomain(
            FuelStationEntity entity, 
            List<FuelTankEntity> tankEntities, 
            List<FuelPriceEntity> priceEntities,
            List<FuelStationManagerEntity> managerEntities) {
        
        if (entity == null) return null;
        
        // Map address
        FuelStationAddress address = new FuelStationAddress(
            entity.getStreet(),
            entity.getBuildingNumber(),
            entity.getCity(),
            entity.getPostalCode(),
            entity.getCountry()
        );
        
        // Map fuel tanks
        List<FuelTank> fuelTanks = tankEntities.stream()
            .map(tankEntity -> {
                LocalDate refilDate = tankEntity.getLastRefilDate();
                return new FuelTank(
                    tankEntity.getId(),
                    tankEntity.getFuelGrade(),
                    tankEntity.getCurrentVolume(),
                    tankEntity.getMaxCapacity(),
                    refilDate != null ? Optional.of(refilDate) : Optional.empty()
                );
            })
            .collect(Collectors.toList());
        
        // Map fuel prices
        List<FuelPrice> fuelPrices = priceEntities.stream()
            .map(priceEntity -> new FuelPrice(
                priceEntity.getFuelGrade(),
                priceEntity.getPricePerLiter()
            ))
            .collect(Collectors.toList());
        
        // Map manager IDs
        List<Long> managerIds = managerEntities.stream()
            .map(FuelStationManagerEntity::getManagerId)
            .collect(Collectors.toList());
        
        return new FuelStation(
            entity.getId(),
            address,
            fuelTanks,
            fuelPrices,
            managerIds,
            entity.getStatus(),
            entity.getCreatedAt()
        );
    }

    public static FuelStationEntity toEntity(FuelStation domain) {
        if (domain == null) return null;
        
        return new FuelStationEntity(
            domain.getId(),
            domain.getAddress().street(),
            domain.getAddress().buildingNumber(),
            domain.getAddress().city(),
            domain.getAddress().postalCode(),
            domain.getAddress().country(),
            domain.getStatus(),
            domain.getCreatedAt()
        );
    }

    public static List<FuelTankEntity> toFuelTankEntities(FuelStation domain) {
        if (domain == null || domain.getFuelTanks() == null) return List.of();
        
        return domain.getFuelTanks().stream()
            .map(tank -> new FuelTankEntity(
                tank.getId(),
                tank.getFuelGrade(),
                tank.getCurrentVolume(),
                tank.getMaxCapacity(),
                tank.getLastRefilDate().orElse(null),
                domain.getId()
            ))
            .collect(Collectors.toList());
    }

    public static List<FuelPriceEntity> toFuelPriceEntities(FuelStation domain) {
        if (domain == null || domain.getFuelPrices() == null) return List.of();
        
        return domain.getFuelPrices().stream()
            .map(price -> new FuelPriceEntity(
                null, // Let DB generate ID
                price.fuelGrade(),
                price.pricePerLiter(),
                domain.getId()
            ))
            .collect(Collectors.toList());
    }

    public static List<FuelStationManagerEntity> toFuelStationManagerEntities(FuelStation domain) {
        if (domain == null || domain.getAssignedManagersIds() == null) return List.of();
        
        return domain.getAssignedManagersIds().stream()
            .map(managerId -> new FuelStationManagerEntity(
                null, // Let DB generate ID
                domain.getId(),
                managerId
            ))
            .collect(Collectors.toList());
    }
}package com.fuelstation.managmentapi.infrastructure.persistence.repositories;

import com.fuelstation.managmentapi.infrastructure.persistence.entities.*;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface JpaCredentialsRepository extends JpaRepository<CredentialsEntity, Long> {
    CredentialsEntity findByEmail(String email);
}

@Repository
public interface JpaAdministratorRepository extends JpaRepository<AdministratorEntity, Long> {
    AdministratorEntity findByCredentialsId(Long credentialsId);
}

@Repository
public interface JpaManagerRepository extends JpaRepository<ManagerEntity, Long> {
    ManagerEntity findByCredentialsId(Long credentialsId);
}

@Repository
public interface JpaFuelOrderRepository extends JpaRepository<FuelOrderEntity, Long> {
    List<FuelOrderEntity> findByGasStationId(Long gasStationId);
}

@Repository
public interface JpaFuelStationRepository extends JpaRepository<FuelStationEntity, Long> {
}

@Repository
public interface JpaFuelTankRepository extends JpaRepository<FuelTankEntity, Long> {
    List<FuelTankEntity> findByFuelStationId(Long fuelStationId);
}

@Repository
public interface JpaFuelPriceRepository extends JpaRepository<FuelPriceEntity, Long> {
    List<FuelPriceEntity> findByFuelStationId(Long fuelStationId);
}

@Repository
public interface JpaFuelStationManagerRepository extends JpaRepository<FuelStationManagerEntity, Long> {
    List<FuelStationManagerEntity> findByFuelStationId(Long fuelStationId);
    List<FuelStationManagerEntity> findByManagerId(Long managerId);
    void deleteByFuelStationIdAndManagerId(Long fuelStationId, Long managerId);
}package com.fuelstation.managmentapi.infrastructure.persistence.entities;

import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import com.fuelstation.managmentapi.authentication.domain.UserRole;

@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "credentials")
public class CredentialsEntity {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String email;
    @Enumerated(EnumType.STRING)
    private UserRole role;
    private String password;
    private String accessToken;
}

@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "administrators")
public class AdministratorEntity {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private Long credentialsId;
}

@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "managers")
public class ManagerEntity {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String firtsName;
    private String lastName;
    @Enumerated(EnumType.STRING)
    private com.fuelstation.managmentapi.manager.domain.ManagerStatus status;
    private Long credentialsId;
}

@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "fuel_orders")
public class FuelOrderEntity {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    @Enumerated(EnumType.STRING)
    private com.fuelstation.managmentapi.fuelorder.domain.FuelOrderStatus status;
    @Enumerated(EnumType.STRING)
    private com.fuelstation.managmentapi.common.domain.FuelGrade grade;
    private float amount;
    private Long gasStationId;
    private java.time.LocalDate createdAt;
}

@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "fuel_stations")
public class FuelStationEntity {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    // Address fields
    private String street;
    private String buildingNumber;
    private String city;
    private String postalCode;
    private String country;
    
    @Enumerated(EnumType.STRING)
    private com.fuelstation.managmentapi.fuelstation.domain.models.FuelStationStatus status;
    private java.time.LocalDate createdAt;
}

@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "fuel_tanks")
public class FuelTankEntity {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    @Enumerated(EnumType.STRING)
    private com.fuelstation.managmentapi.common.domain.FuelGrade fuelGrade;
    private float currentVolume;
    private float maxCapacity;
    private java.time.LocalDate lastRefilDate;
    private Long fuelStationId;
}

@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "fuel_prices")
public class FuelPriceEntity {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    @Enumerated(EnumType.STRING)
    private com.fuelstation.managmentapi.common.domain.FuelGrade fuelGrade;
    private float pricePerLiter;
    private Long fuelStationId;
}

@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "fuel_station_managers")
public class FuelStationManagerEntity {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private Long fuelStationId;
    private Long managerId;
}package com.fuelstation.managmentapi.infrastructure.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import com.fuelstation.managmentapi.administrator.domain.AdministratorRepository;
import com.fuelstation.managmentapi.authentication.domain.CredentialsRepository;
import com.fuelstation.managmentapi.fuelorder.domain.FuelOrderRepository;
import com.fuelstation.managmentapi.fuelstation.domain.FuelStationRepository;
import com.fuelstation.managmentapi.infrastructure.persistence.repositories.*;
import com.fuelstation.managmentapi.manager.domain.ManagerRepository;

@Configuration
@EnableJpaRepositories(basePackages = "com.fuelstation.managmentapi.infrastructure.persistence.repositories")
@EnableTransactionManagement
public class InfrastructureConfig {

    @Bean
    public CredentialsRepository credentialsRepository(JpaCredentialsRepository jpaCredentialsRepository) {
        return new CredentialsRepositoryImpl(jpaCredentialsRepository);
    }

    @Bean
    public AdministratorRepository administratorRepository(
            JpaAdministratorRepository jpaAdministratorRepository,
            JpaCredentialsRepository jpaCredentialsRepository) {
        return new AdministratorRepositoryImpl(jpaAdministratorRepository, jpaCredentialsRepository);
    }

    @Bean
    public ManagerRepository managerRepository(
            JpaManagerRepository jpaManagerRepository,
            JpaCredentialsRepository jpaCredentialsRepository) {
        return new ManagerRepositoryImpl(jpaManagerRepository, jpaCredentialsRepository);
    }

    @Bean
    public FuelOrderRepository fuelOrderRepository(JpaFuelOrderRepository jpaFuelOrderRepository) {
        return new FuelOrderRepositoryImpl(jpaFuelOrderRepository);
    }

    @Bean
    public FuelStationRepository fuelStationRepository(
            JpaFuelStationRepository jpaFuelStationRepository,
            JpaFuelTankRepository jpaFuelTankRepository,
            JpaFuelPriceRepository jpaFuelPriceRepository,
            JpaFuelStationManagerRepository jpaFuelStationManagerRepository) {
        return new FuelStationRepositoryImpl(
                jpaFuelStationRepository,
                jpaFuelTankRepository,
                jpaFuelPriceRepository,
                jpaFuelStationManagerRepository);
    }
package com.fuelstation.managmentapi.infrastructure.persistence.repositories;

import com.fuelstation.managmentapi.administrator.domain.Administrator;
import com.fuelstation.managmentapi.administrator.domain.AdministratorRepository;
import com.fuelstation.managmentapi.authentication.domain.Credentials;
import com.fuelstation.managmentapi.authentication.domain.CredentialsRepository;
import com.fuelstation.managmentapi.fuelorder.domain.FuelOrder;
import com.fuelstation.managmentapi.fuelorder.domain.FuelOrderRepository;
import com.fuelstation.managmentapi.fuelstation.domain.FuelStationRepository;
import com.fuelstation.managmentapi.fuelstation.domain.models.FuelStation;
import com.fuelstation.managmentapi.infrastructure.persistence.entities.*;
import com.fuelstation.managmentapi.infrastructure.persistence.mappers.*;
import com.fuelstation.managmentapi.manager.domain.Manager;
import com.fuelstation.managmentapi.manager.domain.ManagerRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;

@Repository
public class CredentialsRepositoryImpl implements CredentialsRepository {

    private final JpaCredentialsRepository jpaCredentialsRepository;

    @Autowired
    public CredentialsRepositoryImpl(JpaCredentialsRepository jpaCredentialsRepository) {
        this.jpaCredentialsRepository = jpaCredentialsRepository;
    }

    @Override
    public Credentials save(Credentials credentials) {
        CredentialsEntity entity = CredentialsMapper.toEntity(credentials);
        entity = jpaCredentialsRepository.save(entity);
        return CredentialsMapper.toDomain(entity);
    }

    @Override
    public Optional<Credentials> findById(Long id) {
        return jpaCredentialsRepository.findById(id)
                .map(CredentialsMapper::toDomain);
    }
}

@Repository
public class AdministratorRepositoryImpl implements AdministratorRepository {

    private final JpaAdministratorRepository jpaAdministratorRepository;
    private final JpaCredentialsRepository jpaCredentialsRepository;

    @Autowired
    public AdministratorRepositoryImpl(
            JpaAdministratorRepository jpaAdministratorRepository,
            JpaCredentialsRepository jpaCredentialsRepository) {
        this.jpaAdministratorRepository = jpaAdministratorRepository;
        this.jpaCredentialsRepository = jpaCredentialsRepository;
    }

    @Override
    public Administrator save(Administrator administrator) {
        AdministratorEntity entity = AdministratorMapper.toEntity(administrator);
        entity = jpaAdministratorRepository.save(entity);
        
        // Fetch the credentials to get the email
        CredentialsEntity credentialsEntity = null;
        if (entity.getCredentialsId() != null) {
            credentialsEntity = jpaCredentialsRepository.findById(entity.getCredentialsId()).orElse(null);
        }
        
        return AdministratorMapper.toDomain(entity, credentialsEntity);
    }

    @Override
    public Optional<Administrator> findById(Long id) {
        return jpaAdministratorRepository.findById(id)
                .map(entity -> {
                    CredentialsEntity credentialsEntity = null;
                    if (entity.getCredentialsId() != null) {
                        credentialsEntity = jpaCredentialsRepository.findById(entity.getCredentialsId()).orElse(null);
                    }
                    return AdministratorMapper.toDomain(entity, credentialsEntity);
                });
    }
}

@Repository
public class ManagerRepositoryImpl implements ManagerRepository {

    private final JpaManagerRepository jpaManagerRepository;
    private final JpaCredentialsRepository jpaCredentialsRepository;

    @Autowired
    public ManagerRepositoryImpl(
            JpaManagerRepository jpaManagerRepository,
            JpaCredentialsRepository jpaCredentialsRepository) {
        this.jpaManagerRepository = jpaManagerRepository;
        this.jpaCredentialsRepository = jpaCredentialsRepository;
    }

    @Override
    public Manager save(Manager manager) {
        ManagerEntity entity = ManagerMapper.toEntity(manager);
        entity = jpaManagerRepository.save(entity);
        
        // Fetch the credentials to get the email
        CredentialsEntity credentialsEntity = null;
        if (entity.getCredentialsId() != null) {
            credentialsEntity = jpaCredentialsRepository.findById(entity.getCredentialsId()).orElse(null);
        }
        
        return ManagerMapper.toDomain(entity, credentialsEntity);
    }

    @Override
    public Optional<Manager> findById(long id) {
        return jpaManagerRepository.findById(id)
                .map(entity -> {
                    CredentialsEntity credentialsEntity = null;
                    if (entity.getCredentialsId() != null) {
                        credentialsEntity = jpaCredentialsRepository.findById(entity.getCredentialsId()).orElse(null);
                    }
                    return ManagerMapper.toDomain(entity, credentialsEntity);
                });
    }
}

@Repository
public class FuelOrderRepositoryImpl implements FuelOrderRepository {

    private final JpaFuelOrderRepository jpaFuelOrderRepository;

    @Autowired
    public FuelOrderRepositoryImpl(JpaFuelOrderRepository jpaFuelOrderRepository) {
        this.jpaFuelOrderRepository = jpaFuelOrderRepository;
    }

    @Override
    public FuelOrder save(FuelOrder fuelOrder) {
        FuelOrderEntity entity = FuelOrderMapper.toEntity(fuelOrder);
        entity = jpaFuelOrderRepository.save(entity);
        return FuelOrderMapper.toDomain(entity);
    }

    @Override
    public Optional<FuelOrder> findById(long id) {
        return jpaFuelOrderRepository.findById(id)
                .map(FuelOrderMapper::toDomain);
    }
}

@Repository
@Transactional
public class FuelStationRepositoryImpl implements FuelStationRepository {

    private final JpaFuelStationRepository jpaFuelStationRepository;
    private final JpaFuelTankRepository jpaFuelTankRepository;
    private final JpaFuelPriceRepository jpaFuelPriceRepository;
    private final JpaFuelStationManagerRepository jpaFuelStationManagerRepository;

    @Autowired
    public FuelStationRepositoryImpl(
            JpaFuelStationRepository jpaFuelStationRepository,
            JpaFuelTankRepository jpaFuelTankRepository,
            JpaFuelPriceRepository jpaFuelPriceRepository,
            JpaFuelStationManagerRepository jpaFuelStationManagerRepository) {
        this.jpaFuelStationRepository = jpaFuelStationRepository;
        this.jpaFuelTankRepository = jpaFuelTankRepository;
        this.jpaFuelPriceRepository = jpaFuelPriceRepository;
        this.jpaFuelStationManagerRepository = jpaFuelStationManagerRepository;
    }

    @Override
    @Transactional
    public FuelStation save(FuelStation fuelStation) {
        // Save main entity
        FuelStationEntity entity = FuelStationMapper.toEntity(fuelStation);
        entity = jpaFuelStationRepository.save(entity);
        Long fuelStationId = entity.getId();
        
        // Handle fuel tanks - delete existing and save new ones
        if (fuelStationId != null) {
            List<FuelTankEntity> existingTanks = jpaFuelTankRepository.findByFuelStationId(fuelStationId);
            jpaFuelTankRepository.deleteAll(existingTanks);
        }
        
        List<FuelTankEntity> tankEntities = FuelStationMapper.toFuelTankEntities(fuelStation);
        tankEntities.forEach(tank -> tank.setFuelStationId(fuelStationId));
        tankEntities = jpaFuelTankRepository.saveAll(tankEntities);
        
        // Handle fuel prices - delete existing and save new ones
        if (fuelStationId != null) {
            List<FuelPriceEntity> existingPrices = jpaFuelPriceRepository.findByFuelStationId(fuelStationId);
            jpaFuelPriceRepository.deleteAll(existingPrices);
        }
        
        List<FuelPriceEntity> priceEntities = FuelStationMapper.toFuelPriceEntities(fuelStation);
        priceEntities.forEach(price -> price.setFuelStationId(fuelStationId));
        priceEntities = jpaFuelPriceRepository.saveAll(priceEntities);
        
        // Handle manager assignments - delete existing and save new ones
        if (fuelStationId != null) {
            List<FuelStationManagerEntity> existingManagerAssignments = 
                    jpaFuelStationManagerRepository.findByFuelStationId(fuelStationId);
            jpaFuelStationManagerRepository.deleteAll(existingManagerAssignments);
        }
        
        List<FuelStationManagerEntity> managerEntities = FuelStationMapper.toFuelStationManagerEntities(fuelStation);
        managerEntities.forEach(assignment -> assignment.setFuelStationId(fuelStationId));
        managerEntities = jpaFuelStationManagerRepository.saveAll(managerEntities);
        
        // Return updated domain object
        return FuelStationMapper.toDomain(entity, tankEntities, priceEntities, managerEntities);
    }

    @Override
    @Transactional(readOnly = true)
    public Optional<FuelStation> findById(Long id) {
        Optional<FuelStationEntity> entityOptional = jpaFuelStationRepository.findById(id);
        
        if (entityOptional.isPresent()) {
            FuelStationEntity entity = entityOptional.get();
            List<FuelTankEntity> tankEntities = jpaFuelTankRepository.findByFuelStationId(id);
            List<FuelPriceEntity> priceEntities = jpaFuelPriceRepository.findByFuelStationId(id);
            List<FuelStationManagerEntity> managerEntities = jpaFuelStationManagerRepository.findByFuelStationId(id);
            
            return Optional.of(FuelStationMapper.toDomain(entity, tankEntities, priceEntities, managerEntities));
        }
        
        return Optional.empty();
    }
}}